{"version":3,"sources":["Noise/mathUtils.ts","Noise/imageGenerator.ts","Noise/noise.ts","context.tsx","components/Collapsible.tsx","components/NoiseTypeSettings.tsx","components/InteractiveInput.tsx","components/OffsetAndScaleSettings.tsx","components/FractalSettings.tsx","components/GradientCreator.tsx","components/GradientSettings.tsx","components/Sidebar.tsx","components/ImageCanvas.tsx","App.tsx","index.tsx"],"names":["squaresToTriangles","Math","sqrt","trainglesToSquares","lerp","a","b","t","smooth","fract","n","floor","random2","p","x","sin","dot","Vector2","y","v1","v2","NoiseType","this","lenght","p1","p2","Color","r","g","values","replace","split","parseInt","c1","c2","Noise","frequency","point","i0","i1","hashMask","h0","hashTable","h1","ix0","iy0","tx","ty","ix1","iy1","h00","h10","h01","h11","t0","t1","v0","gradients1D","gradientsMask1D","tx0","ty0","tx1","ty1","g00","gradients2D","gradientsMask2D","g10","g01","g11","v00","v10","v01","v11","SQRT2","ix","f","sample","simplexValue1dPart","iy","unskew","skew","sx","sy","simplexValue2dPart","scale","fx","fy","minDst","neighbor","dist","min","noiseFunction","octaves","lacunarity","persistance","sum","amplitude","range","o","valueFunctions","value1d","value2d","perlinFunctions","perlin1d","perlin2d","simplexFunctions","simplexValue1d","simplexValue2d","noiseFunctions","worleyNoise","normalized","getImageData","resolution","noiseType","dimension","offsetX","offsetY","gradient","imageData","ImageData","stepSize","height","width","Worley","val","Sum","c","evaluateGradient","idx","data","startColor","color","endColor","length","i","currentColorStop","Number","offset","AppContext","React","createContext","undefined","AppProvider","children","useState","Value","setNoiseType","setDimension","setFrequency","setOffsetX","setOffsetY","setOctaves","setLacunarity","setPersistance","setResolution","useGradient","setUseGradient","palette","setPalette","Provider","value","useGlobalContext","useContext","Collapsible","open","ref","setOpen","useRef","setHeight","useEffect","current","getBoundingClientRect","resizeObserver","ResizeObserver","el","contentRect","observe","disconnect","className","style","NoiseTypeSettings","openSidebar","isSidebarOpen","onClick","htmlFor","name","id","onChange","e","target","Perlin","Simplex","Error","InteractiveInput","dragStartX","prevDeltaX","label","defaultValue","setParameter","setValue","dragStop","document","removeEventListener","dragMove","deltaX","screenX","prevValue","onMouseDown","addEventListener","type","round","EPSILON","parseFloat","OffsetAndScaleSettings","newRes","handleResolutionChange","FractalSettings","max","step","rgbToRgba","rgb","WrappedColorPicker","onSelect","rest","opacity","disableAlpha","GradientCreator","showAnglePicker","paletteHeight","onPaletteChange","GradientSettings","checked","Sidebar","downloadImage","isOpen","setIsOpen","ImageCanvas","canvasRef","ctx","getContext","putImageData","containerWidth","setContainerWidth","margin","setMargin","marginLeft","minScale","maxScale","App","setIsSidebarOpen","img","toDataURL","link","createElement","download","href","click","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90293191.chunk.js","sourcesContent":["const squaresToTriangles = (3 - Math.sqrt(3)) / 6;\r\nconst trainglesToSquares = (Math.sqrt(3) - 1) / 2;\r\n\r\n// simple linear interpolation function\r\nconst lerp = (a: number, b: number, t: number) => {\r\n  return a + (b - a) * t;\r\n};\r\n\r\n// smooth function with second derivative equal to zero at both ends\r\nconst smooth = (t: number) => {\r\n  return t * t * t * (t * (t * 6 - 15) + 10);\r\n};\r\n\r\n// returns fractional part of n\r\nconst fract = (n: number) => {\r\n  return n - Math.floor(n);\r\n};\r\n\r\n// simple pseudorandom function that generates random point\r\nconst random2 = (p: Vector2) => {\r\n  const x = fract(Math.sin(dot(p, new Vector2(127.1, 311.7))) * 43758.5453);\r\n  const y = fract(Math.sin(dot(p, new Vector2(269.5, 183.3))) * 43758.5453);\r\n  return new Vector2(x, y);\r\n};\r\n\r\n// Ovreload for dot product\r\nfunction dot(g: Vector2, x: number, y: number): number;\r\nfunction dot(a: Vector2, b: Vector2): number;\r\nfunction dot(v1: Vector2, v2: Vector2 | number, y?: number): number {\r\n  if (typeof v2 === \"number\") {\r\n    return v1.x * v2 + v1.y * y!;\r\n  } else {\r\n    return v1.x * v2.x + v1.y + v2.y;\r\n  }\r\n}\r\n\r\nclass Vector2 {\r\n  x: number;\r\n  y: number;\r\n  constructor(x = 0, y = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  get lenght() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n  get normalized() {\r\n    return new Vector2(this.x / this.lenght, this.y / this.lenght);\r\n  }\r\n  public static distance(p1: Vector2, p2: Vector2) {\r\n    return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n  }\r\n}\r\nclass Color {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n  constructor(color: string);\r\n  constructor(r: number, g: number, b: number, a: number);\r\n  constructor(r: number | string, g?: number, b?: number, a?: number) {\r\n    if (typeof r === \"string\") {\r\n      let values = r.replace(\"rgb\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\");\r\n\r\n      this.r = parseInt(values[0]);\r\n      this.g = parseInt(values[1]);\r\n      this.b = parseInt(values[2]);\r\n      this.a = 1;\r\n    } else {\r\n      this.r = r;\r\n      this.g = g!;\r\n      this.b = b!;\r\n      this.a = a!;\r\n    }\r\n  }\r\n\r\n  public static lerp(c1: Color, c2: Color, t: number) {\r\n    const interpolR = c1.r + (c2.r - c1.r) * t;\r\n    const interpolG = c1.g + (c2.g - c1.g) * t;\r\n    const interpolB = c1.b + (c2.b - c1.b) * t;\r\n\r\n    return new Color(interpolR, interpolG, interpolB, 1);\r\n  }\r\n}\r\n\r\nexport {\r\n  lerp,\r\n  smooth,\r\n  dot,\r\n  random2,\r\n  fract,\r\n  Vector2,\r\n  Color,\r\n  squaresToTriangles,\r\n  trainglesToSquares,\r\n};\r\n","import { Color, Vector2 } from \"./mathUtils\";\r\nimport { Noise } from \"./noise\";\r\n\r\nenum NoiseType {\r\n  Value,\r\n  Perlin,\r\n  Simplex,\r\n  Worley,\r\n}\r\n\r\n// function that returns noise texture based on passed parameters\r\nconst getImageData = (\r\n  resolution: number,\r\n  noiseType: NoiseType,\r\n  dimension: number,\r\n  frequency: number,\r\n  offsetX: number,\r\n  offsetY: number,\r\n  octaves: number,\r\n  lacunarity: number,\r\n  persistance: number,\r\n  gradient?: { offset: string; color: string }[]\r\n) => {\r\n  const imageData = new ImageData(resolution, resolution);\r\n  const stepSize = 1 / resolution;\r\n\r\n  for (let y = 0; y < imageData.height; y++) {\r\n    for (let x = 0; x < imageData.width; x++) {\r\n      const point = new Vector2((x + 0.5) * stepSize - 0.5, (y + 0.5) * stepSize - 0.5);\r\n      point.x += offsetX;\r\n      point.y += offsetY;\r\n\r\n      // make sure we dont get out of index error when using worley noise\r\n      if (noiseType === NoiseType.Worley) {\r\n        dimension = 1;\r\n      }\r\n\r\n      const noiseFunction = Noise.noiseFunctions[noiseType][dimension - 1];\r\n      let val = Noise.Sum(noiseFunction, point, frequency, octaves, lacunarity, persistance);\r\n\r\n      val = val * 0.5 + 0.5;\r\n      let c: Color | undefined;\r\n\r\n      if (gradient) {\r\n        // calculate the color\r\n        c = evaluateGradient(gradient, val);\r\n      }\r\n\r\n      // TODO: This should be multithreaded (ideally)\r\n      const idx = ((imageData.height - y - 1) * imageData.width + x) * 4; // calculate pixel index so that positive y is up\r\n      // set color data for single pixel (rgba)\r\n      // adding offset of 0.5 because so te pixel origin lies in midlle of top left corner\r\n      imageData.data[idx] = c ? c.r : 255 * val; // red\r\n      imageData.data[idx + 1] = c ? c.g : 255 * val; // green (remapping to positive y up)\r\n      imageData.data[idx + 2] = c ? c.b : 255 * val; // blue\r\n      imageData.data[idx + 3] = 255; // force alpha to be always 100%\r\n    }\r\n  }\r\n  return imageData;\r\n};\r\n\r\nconst getUVImageData = (resolution: number, height: number) => {\r\n  const imageData = new ImageData(resolution, height);\r\n  const stepSize = 1 / resolution;\r\n\r\n  for (let y = 0; y < imageData.height; y++) {\r\n    for (let x = 0; x < imageData.width; x++) {\r\n      const point = new Vector2((x + 0.5) * stepSize, (y + 0.5) * stepSize);\r\n\r\n      const idx = ((imageData.height - y - 1) * imageData.width + x) * 4; // calculate pixel index so that positive y is up\r\n      // set color data for single pixel (rgba)\r\n      // adding offset of 0.5 because so te pixel origin lies in midlle of top left corner\r\n      imageData.data[idx] = 255 * point.x; // red\r\n      imageData.data[idx + 1] = 255 * point.y; // green (remapping to positive y up)\r\n      imageData.data[idx + 2] = 0; // blue\r\n      imageData.data[idx + 3] = 255; // force alpha to be always 100%\r\n    }\r\n  }\r\n  return imageData;\r\n};\r\nconst getWorleyNoiseImageData = (resolution: number, height: number) => {\r\n  const imageData = new ImageData(resolution, height);\r\n  const stepSize = 1 / resolution;\r\n\r\n  for (let y = 0; y < imageData.height; y++) {\r\n    for (let x = 0; x < imageData.width; x++) {\r\n      const point = new Vector2((x + 0.5) * stepSize - 0.5, (y + 0.5) * stepSize - 0.5);\r\n\r\n      const val = Noise.worleyNoise(point, 4);\r\n\r\n      const idx = ((imageData.height - y - 1) * imageData.width + x) * 4; // calculate pixel index so that positive y is up\r\n      // set color data for single pixel (rgba)\r\n      // adding offset of 0.5 because so te pixel origin lies in midlle of top left corner\r\n      imageData.data[idx] = 255 * val; // red\r\n      imageData.data[idx + 1] = 255 * val; // green (remapping to positive y up)\r\n      imageData.data[idx + 2] = 255 * val; // blue\r\n      imageData.data[idx + 3] = 255; // force alpha to be always 100%\r\n    }\r\n  }\r\n  return imageData;\r\n};\r\n\r\nconst evaluateGradient = (gradient: { offset: string; color: string }[], t: number) => {\r\n  // loop through each color and find start color and  end color for gradient\r\n  let startColor = gradient[0].color;\r\n  let endColor = gradient[gradient.length - 1].color;\r\n\r\n  for (let i = 0; i < gradient.length; i++) {\r\n    const currentColorStop = gradient[i];\r\n\r\n    if (Number(currentColorStop.offset) <= t) {\r\n      startColor = currentColorStop.color;\r\n    } else if (Number(currentColorStop.offset) > t) {\r\n      endColor = currentColorStop.color;\r\n      break;\r\n    }\r\n  }\r\n  return Color.lerp(new Color(startColor), new Color(endColor), t);\r\n};\r\n\r\nexport { getImageData, getUVImageData, getWorleyNoiseImageData, evaluateGradient, NoiseType };\r\n","import {\r\n  lerp,\r\n  smooth,\r\n  Vector2,\r\n  dot,\r\n  trainglesToSquares,\r\n  squaresToTriangles,\r\n  random2,\r\n  fract,\r\n} from \"./mathUtils\";\r\n\r\ntype NoiseFunction = (p: Vector2, f: number) => number;\r\n\r\nclass Noise {\r\n  private static valueFunctions = [Noise.value1d, Noise.value2d];\r\n  private static perlinFunctions = [Noise.perlin1d, Noise.perlin2d];\r\n  private static simplexFunctions = [Noise.simplexValue1d, Noise.simplexValue2d];\r\n  // TODO: Should be a better method of getting the noise type\r\n  public static noiseFunctions = [\r\n    Noise.valueFunctions,\r\n    Noise.perlinFunctions,\r\n    Noise.simplexFunctions,\r\n    [Noise.worleyNoise],\r\n  ];\r\n\r\n  // same hashTable as Ken Perlin uses in his refernece\r\n  // array size is double the hashMask to avoid unescescary masking\r\n  private static hashTable = [\r\n    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69,\r\n    142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219,\r\n    203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175,\r\n    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230,\r\n    220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76,\r\n    132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186,\r\n    3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59,\r\n    227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70,\r\n    221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178,\r\n    185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81,\r\n    51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115,\r\n    121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,\r\n    78, 66, 215, 61, 156, 180,\r\n\r\n    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69,\r\n    142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219,\r\n    203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175,\r\n    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230,\r\n    220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76,\r\n    132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186,\r\n    3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59,\r\n    227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70,\r\n    221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178,\r\n    185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81,\r\n    51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115,\r\n    121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,\r\n    78, 66, 215, 61, 156, 180,\r\n  ];\r\n\r\n  private static gradients1D = [-1, 1];\r\n  private static gradientsMask1D = 1;\r\n\r\n  private static gradients2D = [\r\n    new Vector2(1, 0),\r\n    new Vector2(-1, 0),\r\n    new Vector2(0, 1),\r\n    new Vector2(0, -1),\r\n    new Vector2(1, 1).normalized,\r\n    new Vector2(-1, 1).normalized,\r\n    new Vector2(1, -1).normalized,\r\n    new Vector2(-1, -1).normalized,\r\n  ];\r\n  private static gradientsMask2D = 7;\r\n\r\n  private static hashMask = 255;\r\n\r\n  /** VALUE NOISE */\r\n\r\n  public static value1d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y); // create copy because it is passed as reference\r\n    point.x *= frequency;\r\n    let i0 = Math.floor(point.x);\r\n    let t = point.x - i0;\r\n    i0 &= Noise.hashMask;\r\n    let i1 = i0 + 1;\r\n\r\n    let h0 = Noise.hashTable[i0];\r\n    let h1 = Noise.hashTable[i1];\r\n\r\n    t = smooth(t);\r\n\r\n    return lerp(h0, h1, t) * (2 / Noise.hashMask) - 1;\r\n  }\r\n  public static value2d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y); // create copy because it is passed as reference\r\n    point.x *= frequency;\r\n    point.y *= frequency;\r\n\r\n    let ix0 = Math.floor(point.x);\r\n    let iy0 = Math.floor(point.y);\r\n    let tx = point.x - ix0;\r\n    let ty = point.y - iy0;\r\n    ix0 &= Noise.hashMask;\r\n    iy0 &= Noise.hashMask;\r\n\r\n    let ix1 = ix0 + 1;\r\n    let iy1 = iy0 + 1;\r\n\r\n    let h0 = Noise.hashTable[ix0];\r\n    let h1 = Noise.hashTable[ix1];\r\n    let h00 = Noise.hashTable[h0 + iy0];\r\n    let h10 = Noise.hashTable[h1 + iy0];\r\n    let h01 = Noise.hashTable[h0 + iy1];\r\n    let h11 = Noise.hashTable[h1 + iy1];\r\n\r\n    tx = smooth(tx);\r\n    ty = smooth(ty);\r\n\r\n    return lerp(lerp(h00, h10, tx), lerp(h01, h11, tx), ty) * (2 / Noise.hashMask) - 1;\r\n  }\r\n\r\n  /** PERLIN NOISE */\r\n\r\n  public static perlin1d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y); // create copy because it is passed as reference\r\n    point.x *= frequency;\r\n    let i0 = Math.floor(point.x);\r\n    let t0 = point.x - i0;\r\n    let t1 = t0 - 1;\r\n    i0 &= Noise.hashMask;\r\n    let i1 = i0 + 1;\r\n\r\n    let g0 = Noise.gradients1D[Noise.hashTable[i0] & Noise.gradientsMask1D];\r\n    let g1 = Noise.gradients1D[Noise.hashTable[i1] & Noise.gradientsMask1D];\r\n\r\n    let v0 = g0 * t0;\r\n    let v1 = g1 * t1;\r\n\r\n    let t = smooth(t0);\r\n\r\n    return lerp(v0, v1, t) * 2;\r\n  }\r\n  public static perlin2d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y); // create copy because it is passed as reference\r\n    point.x *= frequency;\r\n    point.y *= frequency;\r\n\r\n    let ix0 = Math.floor(point.x);\r\n    let iy0 = Math.floor(point.y);\r\n    let tx0 = point.x - ix0;\r\n    let ty0 = point.y - iy0;\r\n    let tx1 = tx0 - 1;\r\n    let ty1 = ty0 - 1;\r\n\r\n    ix0 &= Noise.hashMask;\r\n    iy0 &= Noise.hashMask;\r\n\r\n    let ix1 = ix0 + 1;\r\n    let iy1 = iy0 + 1;\r\n\r\n    let h0 = Noise.hashTable[ix0];\r\n    let h1 = Noise.hashTable[ix1];\r\n    let g00 = Noise.gradients2D[Noise.hashTable[h0 + iy0] & Noise.gradientsMask2D];\r\n    let g10 = Noise.gradients2D[Noise.hashTable[h1 + iy0] & Noise.gradientsMask2D];\r\n    let g01 = Noise.gradients2D[Noise.hashTable[h0 + iy1] & Noise.gradientsMask2D];\r\n    let g11 = Noise.gradients2D[Noise.hashTable[h1 + iy1] & Noise.gradientsMask2D];\r\n\r\n    let v00 = dot(g00, tx0, ty0);\r\n    let v10 = dot(g10, tx1, ty0);\r\n    let v01 = dot(g01, tx0, ty1);\r\n    let v11 = dot(g11, tx1, ty1);\r\n\r\n    let tx = smooth(tx0);\r\n    let ty = smooth(ty0);\r\n\r\n    return lerp(lerp(v00, v10, tx), lerp(v01, v11, tx), ty) * Math.SQRT2;\r\n  }\r\n\r\n  /** SIMPLEX NOISE */\r\n\r\n  static simplexValue1dPart(p: Vector2, ix: number) {\r\n    const x = p.x - ix;\r\n    const f = 1 - x * x;\r\n    const f2 = f * f;\r\n    const f3 = f * f2;\r\n    const h = Noise.hashTable[ix & Noise.hashMask];\r\n\r\n    return f3 * h;\r\n  }\r\n  public static simplexValue1d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y);\r\n    point.x *= frequency;\r\n\r\n    const ix = Math.floor(point.x);\r\n    let sample = Noise.simplexValue1dPart(point, ix);\r\n    sample += Noise.simplexValue1dPart(point, ix + 1);\r\n\r\n    return sample * (2 / Noise.hashMask) - 1;\r\n  }\r\n\r\n  static simplexValue2dPart(p: Vector2, ix: number, iy: number) {\r\n    const unskew = (ix + iy) * squaresToTriangles;\r\n    const x = p.x - ix + unskew;\r\n    const y = p.y - iy + unskew;\r\n    const f = 0.5 - x * x - y * y;\r\n    let sample = 0;\r\n    if (f > 0) {\r\n      const f2 = f * f;\r\n      const f3 = f * f2;\r\n      sample = f3;\r\n    }\r\n    const h = Noise.hashTable[Noise.hashTable[ix & Noise.hashMask] + (iy & Noise.hashMask)];\r\n    return h * sample;\r\n  }\r\n  public static simplexValue2d(p: Vector2, frequency: number) {\r\n    let point = new Vector2(p.x, p.y);\r\n    point.x *= frequency;\r\n    point.y *= frequency;\r\n\r\n    const skew = (point.x + point.y) * trainglesToSquares;\r\n    const sx = point.x + skew;\r\n    const sy = point.y + skew;\r\n\r\n    const ix = Math.floor(sx);\r\n    const iy = Math.floor(sy);\r\n\r\n    let sample = Noise.simplexValue2dPart(point, ix, iy);\r\n    sample += Noise.simplexValue2dPart(point, ix + 1, iy + 1);\r\n    if (sx - ix >= sy - iy) {\r\n      sample += Noise.simplexValue2dPart(point, ix + 1, iy);\r\n    } else {\r\n      sample += Noise.simplexValue2dPart(point, ix, iy + 1);\r\n    }\r\n\r\n    return sample * (8 * (2 / Noise.hashMask)) - 1;\r\n  }\r\n\r\n  /** WORLEY NOISE */\r\n\r\n  public static worleyNoise(p: Vector2, scale: number) {\r\n    // create copy and apply scale\r\n    let point = new Vector2(p.x, p.y);\r\n    point.x *= scale;\r\n    point.y *= scale;\r\n\r\n    // integer portion of point coordinates\r\n    const ix = Math.floor(point.x);\r\n    const iy = Math.floor(point.y);\r\n    // fractional portion of point coordinates\r\n    const fx = fract(point.x);\r\n    const fy = fract(point.y);\r\n\r\n    let minDst = 1;\r\n\r\n    // loop to check neighbour cells\r\n    for (let y = -1; y <= 1; y++) {\r\n      for (let x = -1; x <= 1; x++) {\r\n        const neighbor = new Vector2(x, y); // get neighbour\r\n        const point = random2(new Vector2(neighbor.x + ix, neighbor.y + iy)); // get position of point in neighbour cell\r\n\r\n        const diff = new Vector2(neighbor.x + point.x - fx, neighbor.y + point.y - fy); // calculate difference vector pixel and point\r\n\r\n        const dist = diff.lenght; // distance to point\r\n        minDst = Math.min(minDst, dist);\r\n      }\r\n    }\r\n\r\n    return minDst * 2 - 1;\r\n  }\r\n\r\n  public static Sum(\r\n    noiseFunction: NoiseFunction,\r\n    point: Vector2,\r\n    frequency: number,\r\n    octaves: number,\r\n    lacunarity: number,\r\n    persistance: number\r\n  ) {\r\n    let sum = noiseFunction(point, frequency);\r\n    let amplitude = 1;\r\n    let range = 1;\r\n    for (let o = 1; o < octaves; o++) {\r\n      frequency *= lacunarity;\r\n      amplitude *= persistance;\r\n      range += amplitude;\r\n      sum += noiseFunction(point, frequency) * amplitude;\r\n    }\r\n    return sum / range;\r\n  }\r\n}\r\n\r\nexport { Noise };\r\n","import React, { useContext, useState } from \"react\";\r\nimport { NoiseType } from \"./Noise/imageGenerator\";\r\n\r\ninterface AppContextInterface {\r\n  noiseType: NoiseType;\r\n  setNoiseType: (type: NoiseType) => void;\r\n  dimension: number;\r\n  setDimension: (n: number) => void;\r\n  frequency: number;\r\n  setFrequency: (n: number) => void;\r\n  offsetX: number;\r\n  setOffsetX: (n: number) => void;\r\n  offsetY: number;\r\n  setOffsetY: (n: number) => void;\r\n  octaves: number;\r\n  setOctaves: (n: number) => void;\r\n  lacunarity: number;\r\n  setLacunarity: (n: number) => void;\r\n  persistance: number;\r\n  setPersistance: (n: number) => void;\r\n  palette: { offset: string; color: string }[];\r\n  setPalette: (pallete: { offset: string; color: string }[]) => void;\r\n  resolution: number;\r\n  setResolution: (n: number) => void;\r\n  useGradient: boolean;\r\n  setUseGradient: (use: boolean) => void;\r\n}\r\n\r\nconst AppContext = React.createContext<AppContextInterface>(undefined!);\r\n\r\nconst AppProvider: React.FC = ({ children }) => {\r\n  const [noiseType, setNoiseType] = useState(NoiseType.Value);\r\n  const [dimension, setDimension] = useState(1);\r\n  const [frequency, setFrequency] = useState(4);\r\n  const [offsetX, setOffsetX] = useState(0);\r\n  const [offsetY, setOffsetY] = useState(0);\r\n  const [octaves, setOctaves] = useState(1);\r\n  const [lacunarity, setLacunarity] = useState(2.0);\r\n  const [persistance, setPersistance] = useState(0.5);\r\n  const [resolution, setResolution] = useState(512);\r\n  const [useGradient, setUseGradient] = useState(false);\r\n  const [palette, setPalette] = useState([\r\n    { offset: \"0.00\", color: \"rgb(0, 0, 0)\" },\r\n    { offset: \"1.00\", color: \"rgb(255, 255, 255)\" },\r\n  ]);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        noiseType,\r\n        setNoiseType,\r\n        dimension,\r\n        setDimension,\r\n        frequency,\r\n        setFrequency,\r\n        offsetX,\r\n        setOffsetX,\r\n        offsetY,\r\n        setOffsetY,\r\n        octaves,\r\n        setOctaves,\r\n        lacunarity,\r\n        setLacunarity,\r\n        persistance,\r\n        setPersistance,\r\n        palette,\r\n        setPalette,\r\n        resolution,\r\n        setResolution,\r\n        useGradient,\r\n        setUseGradient,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppProvider, AppContext };\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\ntype Props = {\r\n  open: boolean;\r\n  setOpen: (open: React.SetStateAction<boolean>) => void;\r\n};\r\n\r\nconst Collapsible: React.FC<Props> = ({ open, children, setOpen }) => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const [height, setHeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      setHeight(ref.current?.getBoundingClientRect().height!);\r\n    } else {\r\n      setHeight(0);\r\n    }\r\n  }, [open]);\r\n\r\n  // resize the collapsible when its height changes\r\n  useEffect(() => {\r\n    if (!height || !open || !ref.current) return undefined;\r\n    const resizeObserver = new ResizeObserver((el) => {\r\n      setHeight(el[0].contentRect.height);\r\n    });\r\n    resizeObserver.observe(ref.current);\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [height, open]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"my-collapse\" style={{ height }}>\r\n        <div ref={ref}>\r\n          <div>{open && <div className=\"p-1\">{children}</div>}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Collapsible;\r\n","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { NoiseType } from \"../Noise/imageGenerator\";\r\nimport { RiArrowDropDownFill } from \"react-icons/ri\";\r\nimport { CgEditNoise } from \"react-icons/cg\";\r\nimport Collapsible from \"./Collapsible\";\r\n\r\ntype Props = {\r\n  openSidebar: (open: boolean) => void;\r\n  isSidebarOpen: boolean;\r\n};\r\n\r\nconst NoiseTypeSettings = ({ openSidebar, isSidebarOpen }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const { noiseType, setNoiseType, setDimension } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    if (open && !isSidebarOpen) {\r\n      setOpen(false);\r\n    }\r\n  }, [isSidebarOpen, open]);\r\n\r\n  const handleNoiseTypeChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    switch (e.target.value) {\r\n      case \"value\":\r\n        setNoiseType(NoiseType.Value);\r\n        break;\r\n      case \"perlin\":\r\n        setNoiseType(NoiseType.Perlin);\r\n        break;\r\n      case \"simplex\":\r\n        setNoiseType(NoiseType.Simplex);\r\n        break;\r\n      case \"worley\":\r\n        setNoiseType(NoiseType.Worley);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"Unknow noise type!\");\r\n    }\r\n  };\r\n  const handleDimensionChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    setDimension(parseInt(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <button\r\n        className=\"nav-link\"\r\n        onClick={() => {\r\n          setOpen(!open);\r\n          openSidebar(true);\r\n        }}\r\n      >\r\n        <CgEditNoise className=\"nav-link-icon\" />\r\n        <span className=\"link-text\">Noise Type</span>\r\n        <RiArrowDropDownFill className={`link-dropdown ${open && \"open\"}`} />\r\n      </button>\r\n\r\n      <Collapsible open={open} setOpen={setOpen}>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"noiseType\" className=\"label\">\r\n            Noise Type:\r\n          </label>\r\n          <div className=\"select\">\r\n            <select name=\"noiseType\" id=\"noiseType\" onChange={handleNoiseTypeChange}>\r\n              <option value=\"value\">Value</option>\r\n              <option value=\"perlin\">Perlin</option>\r\n              <option value=\"simplex\">Simplex</option>\r\n              <option value=\"worley\">Worley</option>\r\n            </select>\r\n            <span className=\"focus\"></span>\r\n          </div>\r\n        </div>\r\n\r\n        {noiseType !== NoiseType.Worley && (\r\n          <div className=\"input-container\">\r\n            <label htmlFor=\"noiseType\" className=\"label\">\r\n              Dimension:\r\n            </label>\r\n            <div className=\"select\">\r\n              <select name=\"dimension\" id=\"dimesnion\" onChange={handleDimensionChange}>\r\n                <option value={1}>1D</option>\r\n                <option value={2}>2D</option>\r\n              </select>\r\n              <span className=\"focus\"></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"underline\"></div>\r\n      </Collapsible>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NoiseTypeSettings;\r\n","import { useEffect, useState } from \"react\";\r\n\r\ntype Props = {\r\n  label: string;\r\n  id: string;\r\n  defaultValue: number;\r\n  setParameter: (n: number) => void;\r\n};\r\n\r\nconst InteractiveInput = ({ label, id, defaultValue, setParameter }: Props) => {\r\n  const [value, setValue] = useState(defaultValue);\r\n  useEffect(() => {\r\n    setParameter(value);\r\n  }, [value, setParameter]);\r\n\r\n  let dragStartX: number;\r\n  let prevDeltaX: number;\r\n\r\n  const dragStart = (e: React.MouseEvent<HTMLLabelElement, MouseEvent>) => {\r\n    document.addEventListener(\"mousemove\", dragMove);\r\n    document.addEventListener(\"mouseup\", dragStop);\r\n\r\n    dragStartX = e.screenX;\r\n    prevDeltaX = dragStartX;\r\n  };\r\n  const dragStop = () => {\r\n    document.removeEventListener(\"mousemove\", dragMove);\r\n    document.removeEventListener(\"mouseup\", dragStop);\r\n  };\r\n  const dragMove = (e: MouseEvent) => {\r\n    const deltaX = e.screenX - prevDeltaX;\r\n\r\n    setValue((prevValue) => {\r\n      return prevValue + deltaX * 0.01;\r\n    });\r\n    prevDeltaX = e.screenX;\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <label htmlFor={id} className=\"interactive-input-label\" onMouseDown={dragStart}>\r\n        {label}:\r\n      </label>\r\n      <input\r\n        id={id}\r\n        type=\"number\"\r\n        value={Math.round((value + Number.EPSILON) * 100) / 100}\r\n        onChange={(e) => {\r\n          setValue(parseFloat(e.target.value));\r\n        }}\r\n        className=\"interactive-input-field\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveInput;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { RiRuler2Fill, RiArrowDropDownFill } from \"react-icons/ri\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport Collapsible from \"./Collapsible\";\r\nimport InteractiveInput from \"./InteractiveInput\";\r\n\r\ntype Props = {\r\n  openSidebar: (open: boolean) => void;\r\n  isSidebarOpen: boolean;\r\n};\r\n\r\nconst OffsetAndScaleSettings = ({ openSidebar, isSidebarOpen }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const { setFrequency, setOffsetX, setOffsetY, dimension, resolution, setResolution } =\r\n    useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    if (open && !isSidebarOpen) {\r\n      setOpen(false);\r\n    }\r\n  }, [isSidebarOpen, open]);\r\n\r\n  const handleResolutionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const newRes = Number(e.target.value);\r\n    setResolution(newRes);\r\n  };\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <button\r\n        className=\"nav-link\"\r\n        onClick={() => {\r\n          setOpen(!open);\r\n          openSidebar(true);\r\n        }}\r\n      >\r\n        <RiRuler2Fill className=\"nav-link-icon\" />\r\n        <span className=\"link-text\">Offset and Scale</span>\r\n        <RiArrowDropDownFill className={`link-dropdown ${open && \"open\"}`} />\r\n      </button>\r\n\r\n      <Collapsible open={open} setOpen={setOpen}>\r\n        <InteractiveInput\r\n          label=\"Frequency\"\r\n          id=\"frequency\"\r\n          defaultValue={4}\r\n          setParameter={setFrequency}\r\n        />\r\n\r\n        <InteractiveInput\r\n          label=\"Offset X\"\r\n          id=\"ofssetX\"\r\n          defaultValue={0}\r\n          setParameter={setOffsetX}\r\n        />\r\n        {dimension > 1 && (\r\n          <InteractiveInput\r\n            label=\"Offset Y\"\r\n            id=\"offsetY\"\r\n            defaultValue={0}\r\n            setParameter={setOffsetY}\r\n          />\r\n        )}\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"noiseType\" className=\"label\">\r\n            Resolution (px):\r\n          </label>\r\n          <div className=\"select\">\r\n            <select\r\n              name=\"resolution\"\r\n              id=\"resolution\"\r\n              onChange={(e) => handleResolutionChange(e)}\r\n              value={resolution}\r\n            >\r\n              <option value=\"16\">16</option>\r\n              <option value=\"32\">32</option>\r\n              <option value=\"64\">64</option>\r\n              <option value=\"128\">128</option>\r\n              <option value=\"256\">256</option>\r\n              <option value=\"512\">512</option>\r\n              <option value=\"1024\">1024</option>\r\n              <option value=\"2048\">2048</option>\r\n            </select>\r\n            <span className=\"focus\"></span>\r\n          </div>\r\n        </div>\r\n        <div className=\"underline\"></div>\r\n      </Collapsible>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default OffsetAndScaleSettings;\r\n","import { useEffect, useState } from \"react\";\r\nimport { BsGraphDown } from \"react-icons/bs\";\r\nimport { RiArrowDropDownFill } from \"react-icons/ri\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport Collapsible from \"./Collapsible\";\r\n\r\n// TODO: Make settings components more reusable\r\n\r\ntype Props = {\r\n  openSidebar: (open: boolean) => void;\r\n  isSidebarOpen: boolean;\r\n};\r\n\r\nconst FractalSettings = ({ openSidebar, isSidebarOpen }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const { octaves, setOctaves, lacunarity, setLacunarity, persistance, setPersistance } =\r\n    useGlobalContext();\r\n\r\n  // collapse dropdown when sidebar closes\r\n  useEffect(() => {\r\n    if (open && !isSidebarOpen) {\r\n      setOpen(false);\r\n    }\r\n  }, [isSidebarOpen, open]);\r\n\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <button\r\n        className=\"nav-link\"\r\n        onClick={() => {\r\n          setOpen(!open);\r\n          openSidebar(true);\r\n        }}\r\n      >\r\n        <BsGraphDown className=\"nav-link-icon\" />\r\n        <span className=\"link-text\">Fractal Settings</span>\r\n        <RiArrowDropDownFill className={`link-dropdown ${open && \"open\"}`} />\r\n      </button>\r\n      <Collapsible open={open} setOpen={setOpen}>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"octaves\" className=\"label\">\r\n            Octaves: {octaves}\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1}\r\n            max={8}\r\n            value={octaves}\r\n            onChange={(e) => setOctaves(parseInt(e.target.value))}\r\n            className=\"slider\"\r\n          />\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"lacunarity\" className=\"label\">\r\n            Lacunarity: {lacunarity}\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            min={1.0}\r\n            max={4.0}\r\n            step=\"0.01\"\r\n            value={lacunarity}\r\n            onChange={(e) => setLacunarity(parseFloat(e.target.value))}\r\n            className=\"slider\"\r\n          />\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"persistance\" className=\"label\">\r\n            Persistance: {persistance}\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            min={0.0}\r\n            max={1.0}\r\n            step=\"0.001\"\r\n            value={persistance}\r\n            onChange={(e) => setPersistance(parseFloat(e.target.value))}\r\n            className=\"slider\"\r\n          />\r\n        </div>\r\n        <div className=\"underline\"></div>\r\n      </Collapsible>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default FractalSettings;\r\n","import { useState } from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport { GradientPickerPopover } from \"react-linear-gradient-picker\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst rgbToRgba = (rgb: any, a = 1) => {\r\n  return rgb.replace(\"rgb(\", \"rgba(\").replace(\")\", `, ${a})`);\r\n};\r\n\r\nconst WrappedColorPicker = ({ onSelect, ...rest }: any) => (\r\n  <ChromePicker\r\n    {...rest}\r\n    color={rgbToRgba(rest.color, rest.opacity)}\r\n    onChange={(c: any) => {\r\n      const { r, g, b, a } = c.rgb;\r\n      onSelect(`rgb(${r}, ${g}, ${b})`, a);\r\n    }}\r\n    disableAlpha={true}\r\n  />\r\n);\r\n\r\nconst GradientCreator = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const { palette, setPalette } = useGlobalContext();\r\n\r\n  return (\r\n    <GradientPickerPopover\r\n      {...{\r\n        open,\r\n        setOpen,\r\n        showAnglePicker: false,\r\n        width: 220,\r\n        paletteHeight: 32,\r\n        palette,\r\n        onPaletteChange: setPalette,\r\n      }}\r\n    >\r\n      <WrappedColorPicker />\r\n    </GradientPickerPopover>\r\n  );\r\n};\r\n\r\nexport default GradientCreator;\r\n","import { useEffect, useState } from \"react\";\r\nimport { MdGradient } from \"react-icons/md\";\r\nimport { RiArrowDropDownFill } from \"react-icons/ri\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport Collapsible from \"./Collapsible\";\r\nimport GradientCreator from \"./GradientCreator\";\r\n\r\ntype Props = {\r\n  isSidebarOpen: boolean;\r\n  openSidebar: (open: boolean) => void;\r\n};\r\n\r\nconst GradientSettings = ({ isSidebarOpen, openSidebar }: Props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const { useGradient, setUseGradient } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    if (open && !isSidebarOpen) {\r\n      setOpen(false);\r\n    }\r\n  }, [isSidebarOpen, open]);\r\n\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <button\r\n        className=\"nav-link\"\r\n        onClick={() => {\r\n          setOpen(!open);\r\n          openSidebar(true);\r\n        }}\r\n      >\r\n        <MdGradient className=\"nav-link-icon\" />\r\n        <span className=\"link-text\">Gradient Settings</span>\r\n        <RiArrowDropDownFill className={`link-dropdown ${open && \"open\"}`} />\r\n      </button>\r\n      <Collapsible open={open} setOpen={setOpen}>\r\n        <div className=\"input-container\">\r\n          <label htmlFor=\"useGradient\" className=\"label\">\r\n            Use Gradient:\r\n          </label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={useGradient}\r\n            onChange={() => setUseGradient(!useGradient)}\r\n          />\r\n        </div>\r\n        {useGradient && (\r\n          <div className=\"text-center\">\r\n            <GradientCreator />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"underline\"></div>\r\n      </Collapsible>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default GradientSettings;\r\n","import { FiDownload } from \"react-icons/fi\";\r\nimport { HiChevronDoubleRight } from \"react-icons/hi\";\r\nimport NoiseTypeSettings from \"./NoiseTypeSettings\";\r\nimport OffsetAndScaleSettings from \"./OffsetAndScaleSettings\";\r\nimport FractalSettings from \"./FractalSettings\";\r\nimport GradientSettings from \"./GradientSettings\";\r\n\r\ntype Props = {\r\n  isOpen: boolean;\r\n  setIsOpen: (open: boolean) => void;\r\n  downloadImage: () => void;\r\n};\r\n\r\nconst Sidebar = ({ downloadImage, isOpen, setIsOpen }: Props) => {\r\n  return (\r\n    <nav className={`navbar ${isOpen && \"navbar-open\"}`}>\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"logo\" onClick={() => setIsOpen(!isOpen)}>\r\n          <div className=\"nav-link\">\r\n            <span className=\"link-text\">Noise Generator</span>\r\n            <HiChevronDoubleRight className=\"nav-link-icon\" />\r\n          </div>\r\n        </li>\r\n\r\n        <NoiseTypeSettings openSidebar={setIsOpen} isSidebarOpen={isOpen} />\r\n        <OffsetAndScaleSettings openSidebar={setIsOpen} isSidebarOpen={isOpen} />\r\n        <FractalSettings openSidebar={setIsOpen} isSidebarOpen={isOpen} />\r\n\r\n        <GradientSettings openSidebar={setIsOpen} isSidebarOpen={isOpen} />\r\n\r\n        <li className=\"nav-item\">\r\n          <button className=\"nav-link\" onClick={downloadImage}>\r\n            <FiDownload className=\"nav-link-icon\" />\r\n            <span className=\"link-text download-text\">Download</span>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { getImageData } from \"../Noise/imageGenerator\";\r\nimport { MapInteractionCSS } from \"react-map-interaction\";\r\n\r\ntype Props = {\r\n  isSidebarOpen: boolean;\r\n  canvasRef: React.MutableRefObject<HTMLCanvasElement>;\r\n};\r\n\r\nconst ImageCanvas = ({ canvasRef, isSidebarOpen }: Props) => {\r\n  // Get values from context\r\n  const {\r\n    noiseType,\r\n    dimension,\r\n    frequency,\r\n    offsetX,\r\n    offsetY,\r\n    octaves,\r\n    lacunarity,\r\n    persistance,\r\n    palette,\r\n    resolution,\r\n    useGradient,\r\n  } = useGlobalContext();\r\n\r\n  // Rerender when parameters change\r\n  useEffect(() => {\r\n    const ctx = canvasRef.current.getContext(\"2d\")!;\r\n\r\n    let imageData: ImageData;\r\n\r\n    // get the image data with or without gradient\r\n    if (useGradient) {\r\n      imageData = getImageData(\r\n        resolution,\r\n        noiseType,\r\n        dimension,\r\n        frequency,\r\n        offsetX,\r\n        offsetY,\r\n        octaves,\r\n        lacunarity,\r\n        persistance,\r\n        palette\r\n      );\r\n    } else {\r\n      imageData = getImageData(\r\n        resolution,\r\n        noiseType,\r\n        dimension,\r\n        frequency,\r\n        offsetX,\r\n        offsetY,\r\n        octaves,\r\n        lacunarity,\r\n        persistance\r\n      );\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n  }, [\r\n    canvasRef,\r\n    noiseType,\r\n    dimension,\r\n    frequency,\r\n    offsetX,\r\n    offsetY,\r\n    octaves,\r\n    lacunarity,\r\n    persistance,\r\n    palette,\r\n    resolution,\r\n    useGradient,\r\n  ]);\r\n\r\n  const [containerWidth, setContainerWidth] = useState(\"width: calc(100% - 5rem)\");\r\n  const [margin, setMargin] = useState(\"5rem\");\r\n  useEffect(() => {\r\n    if (isSidebarOpen) {\r\n      setContainerWidth(\"calc(100% - 18rem)\");\r\n      setMargin(\"18rem\");\r\n    } else {\r\n      setContainerWidth(\"calc(100% - 5rem)\");\r\n      setMargin(\"5rem\");\r\n    }\r\n  }, [isSidebarOpen]);\r\n\r\n  return (\r\n    <div className=\"map-container\" style={{ width: containerWidth, marginLeft: margin }}>\r\n      <MapInteractionCSS minScale={0.05} maxScale={10}>\r\n        <div className=\"canvas-container\">\r\n          <canvas ref={canvasRef} width={resolution} height={resolution}></canvas>\r\n        </div>\r\n      </MapInteractionCSS>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCanvas;\r\n","import { useRef, useState } from \"react\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport ImageCanvas from \"./components/ImageCanvas\";\r\n\r\nfunction App() {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null!);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  // downloads current noise texture as .png\r\n  const downloadImage = () => {\r\n    const img = canvasRef.current.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n    const link = document.createElement(\"a\");\r\n    link.download = \"noise-texture.png\";\r\n    link.href = img;\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar isOpen={isSidebarOpen} setIsOpen={setIsSidebarOpen} downloadImage={downloadImage} />\r\n\r\n      <ImageCanvas canvasRef={canvasRef} isSidebarOpen={isSidebarOpen} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}